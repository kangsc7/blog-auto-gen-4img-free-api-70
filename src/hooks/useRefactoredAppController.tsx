
import { useState, useRef } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useAppStateManager } from '@/hooks/useAppStateManager';
import { useAllApiKeysManager } from '@/hooks/useAllApiKeysManager';
import { useTopicGenerator } from '@/hooks/useTopicGenerator';
import { useArticleGenerator } from '@/hooks/useArticleGenerator';
import { useImagePromptGenerator } from '@/hooks/useImagePromptGenerator';
import { useTopicControls } from '@/hooks/useTopicControls';
import { useAppUtils } from '@/hooks/useAppUtils';
import { useOneClick } from '@/hooks/useOneClick';
import { useUserAccess } from '@/hooks/useUserAccess';

export const useRefactoredAppController = () => {
  const { session, profile, loading: authLoading, handleLogin, handleSignUp, handleLogout, isAdmin } = useAuth();
  const { appState, saveAppState, resetApp: handleResetApp } = useAppStateManager();
  
  const { geminiManager, pixabayManager, huggingFaceManager } = useAllApiKeysManager({
    appState,
    saveAppState,
  });
  
  const [preventDuplicates, setPreventDuplicates] = useState(appState.preventDuplicates || false);
  const { hasAccess } = useUserAccess();

  const { isGeneratingTopics, generateTopics } = useTopicGenerator(appState, saveAppState);
  const { isGeneratingContent, generateArticle, stopArticleGeneration } = useArticleGenerator(appState, saveAppState);
  const { isGeneratingImage: isGeneratingPrompt, createImagePrompt: generateImagePrompt, isDirectlyGenerating, generateDirectImage } = useImagePromptGenerator(appState, saveAppState, huggingFaceManager.huggingFaceApiKey, hasAccess || isAdmin);

  const topicControls = useTopicControls(appState, saveAppState);
  const { copyToClipboard, downloadHTML, openWhisk } = useAppUtils({ appState });

  const {
    isOneClickGenerating,
    handleLatestIssueOneClick,
    handleEvergreenKeywordOneClick,
    handleStopOneClick,
    showTopicSelectionDialog,
    setShowTopicSelectionDialog,
    showDuplicateErrorDialog,
    setShowDuplicateErrorDialog
  } = useOneClick(
    appState,
    saveAppState,
    generateTopics,
    topicControls.selectTopic,
    generateArticle,
    profile,
    preventDuplicates,
    hasAccess || isAdmin
  );

  // Ï£ºÏ†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉÅÌÉú - Îã®ÏàúÌôîÎêú Í¥ÄÎ¶¨
  const [showTopicConfirmDialog, setShowTopicConfirmDialog] = useState(false);
  const [pendingTopic, setPendingTopic] = useState<string>('');

  // Ï£ºÏ†ú ÏÑ†ÌÉù Ïãú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
  const handleTopicSelect = (topic: string) => {
    console.log('Ï£ºÏ†ú ÏÑ†ÌÉùÎê®:', topic);
    setPendingTopic(topic);
    setShowTopicConfirmDialog(true);
  };

  // Ï£ºÏ†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ÏóêÏÑú "ÎÑ§, ÏûëÏÑ±ÌïòÍ≤†ÏäµÎãàÎã§" ÌÅ¥Î¶≠ Ïãú - Îã®ÏàúÌôîÎêú Ï≤òÎ¶¨
  const handleTopicConfirm = () => {
    console.log('Ï£ºÏ†ú ÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®:', pendingTopic);
    
    if (!pendingTopic) {
      console.log('Ï£ºÏ†ú ÏóÜÏùå - Î¨¥Ïãú');
      return;
    }
    
    // 1. Ï£ºÏ†ú ÏÑ†ÌÉù
    topicControls.selectTopic(pendingTopic);
    
    // 2. Í∏Ä ÏÉùÏÑ± ÏãúÏûë
    console.log('ÏûêÎèô Í∏Ä ÏÉùÏÑ± ÏãúÏûë:', { topic: pendingTopic, keyword: appState.keyword });
    generateArticle({ topic: pendingTopic, keyword: appState.keyword });
    
    // 3. ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setPendingTopic('');
  };

  // Ï£ºÏ†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ï∑®ÏÜå
  const handleTopicCancel = () => {
    console.log('Ï£ºÏ†ú ÏÑ†ÌÉù Ï∑®ÏÜå');
    setShowTopicConfirmDialog(false);
    setPendingTopic('');
  };

  const convertToMarkdown = () => {
    const markdown = `# ${appState.selectedTopic}\n\n${appState.generatedContent}`;
    copyToClipboard(markdown, "ÎßàÌÅ¨Îã§Ïö¥");
  };

  // ÌÜµÌï©Îêú Ï§ëÎã® Í∏∞Îä•
  const handleUnifiedStop = () => {
    console.log('ÌÜµÌï© Ï§ëÎã® Î≤ÑÌäº ÌÅ¥Î¶≠ - ÏÉÅÌÉú:', { 
      isOneClickGenerating, 
      isGeneratingContent 
    });
    
    if (isOneClickGenerating) {
      handleStopOneClick();
    }
    
    if (isGeneratingContent) {
      stopArticleGeneration();
    }
  };

  // Ï¥àÍ∏∞Ìôî Ìï®Ïàò
  const enhancedResetApp = () => {
    console.log('üîÑ Ìñ•ÏÉÅÎêú Ï¥àÍ∏∞Ìôî ÏãúÏûë');
    window.dispatchEvent(new Event('app-reset'));
    handleResetApp();
    console.log('‚úÖ Ìñ•ÏÉÅÎêú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  };

  const generationStatus = {
    isGeneratingTopics,
    isGeneratingContent,
    isGeneratingImage: isGeneratingPrompt,
    isDirectlyGenerating,
    isOneClickGenerating,
  };

  const generationFunctions = {
    generateTopics: () => generateTopics(),
    generateArticle,
    createImagePrompt: generateImagePrompt,
    generateDirectImage,
    stopArticleGeneration,
  };

  const utilityFunctions = {
    copyToClipboard,
    downloadHTML,
    openWhisk,
  };

  return {
    appState,
    saveAppState,
    session,
    profile,
    authLoading,
    handleLogin,
    handleSignUp,
    handleLogout,
    isAdmin,
    geminiManager,
    pixabayManager,
    huggingFaceManager,
    preventDuplicates,
    setPreventDuplicates,
    handleResetApp: enhancedResetApp,
    isOneClickGenerating,
    handleLatestIssueOneClick,
    handleEvergreenKeywordOneClick,
    handleStopOneClick: handleUnifiedStop,
    generationStatus,
    generationFunctions,
    topicControls: {
      ...topicControls,
      selectTopic: handleTopicSelect,
    },
    utilityFunctions,
    handleTopicConfirm,
    showTopicSelectionDialog,
    setShowTopicSelectionDialog,
    showDuplicateErrorDialog,
    setShowDuplicateErrorDialog,
    showTopicConfirmDialog,
    setShowTopicConfirmDialog,
    pendingTopic,
    handleTopicCancel,
    convertToMarkdown,
  };
};
